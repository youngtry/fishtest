{
  "__type__": "cc.EffectAsset",
  "_name": "Glowing",
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "program": "Glowing|vs|fs",
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "iResolution": {
              "value": [
                1280,
                720,
                0,
                0
              ],
              "type": 16
            },
            "color": {
              "value": [
                1,
                1,
                1,
                1
              ],
              "type": 16
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 708952885,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n    precision highp float;\n\n    uniform sampler2D texture;\n\n    uniform PROPERTIES {\n        vec4 iResolution;\n        vec4 color;\n    }\n\n    varying vec2 v_uv0;\nconst float radius = 1.0;\n    \n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        vec2 uv = fragCoord.xy;\n        vec2 unit = 1.0 / iResolution.xy;\n        vec4 texel = texture2D(texture, uv);\n        vec4 finalColor = vec4(0.0);\n        float density = 0.0;\n    \n        if(texel.a >= 1.0)\n        {\n            finalColor = texel;\n        }\n        else\n        {\n            for(int i = 0; i < (int(radius)); ++i)\n            {\n                density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n            }\n            density = density / radius;\n            finalColor = vec4(color.rgb * density, density);\n            finalColor += vec4(texel.rgb * texel.a, texel.a);\n        }\n        fragColor = finalColor;\n    }\n \n    void main()\n    {\n        mainImage(gl_FragColor, v_uv0.xy);\n    }\n"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\n    precision highp float;\n\n    uniform sampler2D texture;\n\n    uniform vec4 iResolution;\nuniform vec4 color;\nvarying vec2 v_uv0;\nconst float radius = 1.0;\n    \n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        vec2 uv = fragCoord.xy;\n        vec2 unit = 1.0 / iResolution.xy;\n        vec4 texel = texture2D(texture, uv);\n        vec4 finalColor = vec4(0.0);\n        float density = 0.0;\n    \n        if(texel.a >= 1.0)\n        {\n            finalColor = texel;\n        }\n        else\n        {\n            for(int i = 0; i < (int(radius)); ++i)\n            {\n                density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n                density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n            }\n            density = density / radius;\n            finalColor = vec4(color.rgb * density, density);\n            finalColor += vec4(texel.rgb * texel.a, texel.a);\n        }\n        fragColor = finalColor;\n    }\n \n    void main()\n    {\n        mainImage(gl_FragColor, v_uv0.xy);\n    }\n"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "PROPERTIES",
          "members": [
            {
              "name": "iResolution",
              "type": 16,
              "count": 1
            },
            {
              "name": "color",
              "type": 16,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 0
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 30
        }
      ],
      "dependencies": {},
      "name": "Glowing|vs|fs"
    }
  ]
}